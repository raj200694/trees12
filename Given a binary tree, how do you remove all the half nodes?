Given A binary Tree, how do you remove all the half nodes (which has only one child)? Note leaves should not be touched as they have both children as NULL.
For example consider the below tree.
tree1

Nodes 2 and 4 are half nodes as one of their child is Null.

Recommended: Please solve it on “PRACTICE” first, before moving on to the solution.
The idea is to use post-order traversal to solve this problem efficiently. We first process the left children, then right children, and finally the node itself. So we form the new tree bottom up, starting from the leaves towards the root. By the time we process the current node, both its left and right subtrees were already processed. Below is the implementation of this idea.

filter_none
edit
play_arrow

brightness_4
// C program to remove all half nodes 
#include <stdio.h> 
#include <stdlib.h> 
  
struct node 
{ 
    int data; 
    struct node* left, *right; 
}; 
  
struct node* newNode(int data) 
{ 
    struct node* node = (struct node*) 
                        malloc(sizeof(struct node)); 
    node->data = data; 
    node->left = node->right = NULL; 
    return(node); 
} 
  
void printInoder(struct node*root) 
{ 
    if (root != NULL) 
    { 
        printInoder(root->left); 
        printf("%d ",root->data); 
        printInoder(root->right); 
    } 
} 
  
// Removes all nodes with only one child and returns 
// new root (note that root may change) 
struct node* RemoveHalfNodes(struct node* root) 
{ 
    if (root==NULL) 
        return NULL; 
  
    root->left  = RemoveHalfNodes(root->left); 
    root->right = RemoveHalfNodes(root->right); 
  
    if (root->left==NULL && root->right==NULL) 
        return root; 
  
    /* if current nodes is a half node with left 
       child NULL left, then it's right child is 
       returned and replaces it in the given tree */
    if (root->left==NULL) 
    { 
        struct node *new_root = root->right; 
        free(root); // To avoid memory leak 
        return new_root; 
    } 
  
  
    /* if current nodes is a half node with right 
       child NULL right, then it's right child is 
       returned and replaces it in the given tree  */
    if (root->right==NULL) 
    { 
        struct node *new_root = root->left; 
        free(root); // To avoid memory leak 
        return new_root; 
    } 
  
    return root; 
} 
  
// Driver program 
int main(void) 
{ 
    struct node*NewRoot=NULL; 
    struct node *root = newNode(2); 
    root->left        = newNode(7); 
    root->right       = newNode(5); 
    root->left->right = newNode(6); 
    root->left->right->left=newNode(1); 
    root->left->right->right=newNode(11); 
    root->right->right=newNode(9); 
    root->right->right->left=newNode(4); 
  
    printf("Inorder traversal of given tree \n"); 
    printInoder(root); 
  
    NewRoot = RemoveHalfNodes(root); 
  
    printf("\nInorder traversal of the modified tree \n"); 
    printInoder(NewRoot); 
    return 0; 
} 

Output:
Inorder traversal of given tree
7 1 6 11 2 5 4 9
Inorder traversal of the modified tree
1 6 11 2 4
Time complexity of the above solution is O(n) as it does a simple traversal of binary tree.
