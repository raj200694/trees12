#include <iostream>
#include<stack>
using namespace std;

struct Node{
    int data;
    struct Node* left,*right;
};
struct Node* newNode(int data){
    Node* temp = new Node;
    temp->data=data;
    temp->left=temp->right=NULL;
    return temp;
}
void printSpiral(struct Node* node){
    if(node==NULL){
        return;
    }
    stack<struct Node*>s1;
    stack<struct Node*>s2;
    s1.push(node);
    while(!s1.empty()||!s2.empty()){
        while(!s1.empty()){
            struct Node* temp=s1.top();
            cout<<temp->data<<" ";
            s1.pop();
            if(temp->right){
                s2.push(temp->right);
            }
            if(temp->left){
                s2.push(temp->left);
            }
        }
        while(!s2.empty()){
            struct Node* temp=s2.top();
            cout<<temp->data<<" ";
            s2.pop();
            if(temp->left){
                s1.push(temp->left);
            }
            if(temp->right){
                s1.push(temp->right);
            }
        }
    }
}

    int main() 
{ 
    // Let us construct the BST shown in the above figure 
    struct Node* root = newNode(1); 
    root->left = newNode(2); 
    root->right = newNode(3); 
    root->left->left = newNode(7); 
    root->left->right = newNode(6); 
    root->right->left = newNode(5); 
    root->right->right = newNode(4); 
    cout << "Spiral Order traversal of binary tree is \n"; 
    printSpiral(root); 
  
    return 0; 
}
