
// C++ Program to print top View of Binary Tree 
#include<bits/stdc++.h> 
using namespace std; 
  
// Tree node class 
struct Node 
{ 
    int data; //data of the node 
    int hd; //horizontal distance of the node 
    Node *left, *right; //left and right references 
  
    // Constructor of tree node 
    Node(int key) 
    { 
        data = key; 
        hd = INT_MAX; 
        left = right = NULL; 
    } 
}; 
  
// Method that prints the bottom view. 
void topView(Node *root) 
{ 
    if (root == NULL) 
        return; 
  
    // Initialize a variable 'hd' with 0 
    // for the root element. 
    int hd = 0; 
  
    // TreeMap which stores key value pair 
    // sorted on key value 
    map<int, int> m; 
  
    // Queue to store tree nodes in level 
    // order traversal 
    queue<Node *> q; 
  
    // Assign initialized horizontal distance 
    // value to root node and add it to the queue. 
    root->hd = hd; 
    q.push(root);  // In STL, push() is used enqueue an item 
  
    // Loop until the queue is empty (standard 
    // level order loop) 
    while (!q.empty()) 
    { 
        Node *temp = q.front(); 
        q.pop();   // In STL, pop() is used dequeue an item 
  
        // Extract the horizontal distance value 
        // from the dequeued tree node. 
        hd = temp->hd; 
  
        // Put the dequeued tree node to TreeMap 
        // having key as horizontal distance. Every 
        // time we find a node having same horizontal 
        // distance we need to replace the data in 
        // the map. 
        if(m.find(hd)==m.end())
        {
            cout<<temp->data<<" ";
            m[hd] = temp->data;
        }
       
  
        // If the dequeued node has a left child, add 
        // it to the queue with a horizontal distance hd-1. 
        if (temp->left != NULL) 
        { 
            temp->left->hd = hd-1; 
            q.push(temp->left); 
        } 
  
        // If the dequeued node has a right child, add 
        // it to the queue with a horizontal distance 
        // hd+1. 
        if (temp->right != NULL) 
        { 
            temp->right->hd = hd+1; 
            q.push(temp->right); 
        } 
    } 
  
    
} 
  
// Driver Code 
int main() 
{ 
    Node *root = new Node(20); 
    root->left = new Node(8); 
    root->right = new Node(22); 
    root->left->left = new Node(5); 
    root->left->right = new Node(3); 
    root->right->left = new Node(4); 
    root->right->right = new Node(25); 
    root->left->right->left = new Node(10); 
    root->left->right->right = new Node(14); 
    cout << "Top view of the given binary tree :\n";
    topView(root); 
    return 0; 
}






Print nodes in the Top View of Binary Tree | Set 3
Top view of a binary tree is the set of nodes visible when the tree is viewed from the top. Given a binary tree, print the top view of it. The output nodes can be printed in any order. Expected time complexity is O(n)

A node x is there in output if x is the topmost node at its horizontal distance. Horizontal distance of left child of a node x is equal to horizontal distance of x minus 1, and that of right child is horizontal distance of x plus 1.
Example :

       1
    /     \
   2       3
  /  \    / \
 4    5  6   7
Top view of the above binary tree is
4 2 1 3 7

        1
      /   \
    2       3
      \   
        4  
          \
            5
             \
               6
Top view of the above binary tree is
2 1 3 6
Approach:

The idea here is to observe that, if we try to see a tree from its top, then only the nodes which are at top in vertical order will be seen.
Start BFS from root. Maintain a queue of pairs comprising of node(Node *) type and vertical distance of node from root. Also, maintain a map which should store the node at a particular vertical distance.
While processing a node, just check if any node is there in the map at that vertical distance.
If any node is there, it means the node canâ€™t be seen from top, do not consider it. Else, if there is no node at that vertical distance, store that in map and consider for top view.
Below is the implementation based on above approach:
filter_none
edit
play_arrow

brightness_4
// C++ program to print top 
// view of binary tree 
#include <bits/stdc++.h> 
using namespace std; 
  
// Structure of binary tree 
struct Node { 
    Node* left; 
    Node* right; 
    int data; 
}; 
  
// function to create a new node 
Node* newNode(int key) 
{ 
    Node* node = new Node(); 
    node->left = node->right = NULL; 
    node->data = key; 
    return node; 
} 
  
// function should print the topView of 
// the binary tree 
void topView(struct Node* root) 
{ 
    // Base case 
    if (root == NULL) { 
        return; 
    } 
  
    // Take a temporary node 
    Node* temp = NULL; 
  
    // Queue to do BFS 
    queue<pair<Node*, int> > q; 
  
    // map to store node at each vartical distance 
    map<int, int> mp; 
  
    q.push({ root, 0 }); 
  
    // BFS 
    while (!q.empty()) { 
  
        temp = q.front().first; 
        int d = q.front().second; 
        q.pop(); 
  
        // If any node is not at that vertical distance 
        // just insert that node in map and print it 
        if (mp.find(d) == mp.end()) { 
            cout << temp->data << " "; 
            mp[d] = temp->data; 
        } 
  
        // Continue for left node 
        if (temp->left) { 
            q.push({ temp->left, d - 1 }); 
        } 
  
        // Continue for right node 
        if (temp->right) { 
            q.push({ temp->right, d + 1 }); 
        } 
    } 
} 
  
// Driver Program to test above functions 
int main() 
{ 
    /* Create following Binary Tree  
         1  
        / \  
        2 3  
        \  
         4  
          \  
           5  
            \  
             6*/
    Node* root = newNode(1); 
    root->left = newNode(2); 
    root->right = newNode(3); 
    root->left->right = newNode(4); 
    root->left->right->right = newNode(5); 
    root->left->right->right->right = newNode(6); 
    cout << "Following are nodes in top view of Binary Tree\n"; 
    topView(root); 
    return 0; 
} 
Output:
Following are nodes in top view of Binary Tree
2 1 3 6
