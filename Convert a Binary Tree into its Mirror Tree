#include <iostream>
using namespace std;

struct Node{
    int data;
    struct Node* left,*right;
};
struct Node* newNode(int data){
    Node* temp = new Node;
    temp->data=data;
    temp->left=temp->right=NULL;
    return temp;
}
void mirror(struct Node* node){
    if(node==NULL)
    {
        return;
    }
    mirror(node->left);
    mirror(node->right);
    struct Node* temp=node->left;
    node->left=node->right;
    node->right=temp;
}
void inOrder(struct Node* node){
    if(node==NULL)
    {
        return;
    }
    inOrder(node->left);
    cout<<node->data;
    inOrder(node->right);
}
int main() 
{ 
    struct Node *root = newNode(1); 
    root->left = newNode(2); 
    root->right = newNode(3); 
    root->left->left = newNode(4); 
    root->left->right = newNode(5);  
      
    /* Print inorder traversal of the input tree */
    cout << "Inorder traversal of the constructed"
         << " tree is" << endl; 
    inOrder(root); 
      
    /* Convert tree to its mirror */
    mirror(root);  
      
    /* Print inorder traversal of the mirror tree */
    cout << "\nInorder traversal of the mirror tree"
         << " is \n";  
    inOrder(root); 
      
    return 0;  
} 
