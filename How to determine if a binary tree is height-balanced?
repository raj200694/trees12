#include <iostream>
using namespace std;

struct Node{
    int data;
    struct Node* left,*right;
};
struct Node* newNode(int data){
    Node* temp = new Node;
    temp->data=data;
    temp->left=temp->right=NULL;
    return temp;
}
int height(struct Node* node){
    if(node==NULL){
        return 0;
    }
    else{
        int lDepth=height(node->left);
        int rDepth=height(node->right);
        if(lDepth>rDepth){
            return (lDepth+1);
        }
        else{
            return (rDepth+1);
        }
    }
}
bool isBalanced(struct Node* root){
    int lh,rh;
    if(root==NULL){
        return 1;
    }
    lh=height(root->left);
    rh=height(root->right);
    if(abs(lh-rh)<=1&&isBalanced(root->left)&&isBalanced(root->right)){
        return 1;
    }
    return 0;
}
int main()  
{  
    Node *root = newNode(1);  
    root->left = newNode(2);  
    root->right = newNode(3);  
    root->left->left = newNode(4);  
    root->left->right = newNode(5);  
    root->left->left->left = newNode(8);  
  
    if(isBalanced(root))  
    cout << "Tree is balanced";  
    else
    cout << "Tree is not balanced";  
    return 0;  
}  
